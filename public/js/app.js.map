{"version":3,"file":"public\\js\\app.js","sources":["src/js/basic-shapes-stencil.js","src/js/controllers.js","src/js/shapes.js"],"names":[],"mappingsrsourcesContent":["var basicShapesStencil = {\r\n\t\"name\": \"Basic Shapes\",\r\n\t\"templates\": [{\r\n\t\t\"name\": \"Rectangle\",\r\n\t\t\"shape\": {\r\n\t\t\t\"type\": \"basic.Rect\",\r\n\t\t\t\"position\": {\r\n\t\t\t\t\"x\": 0,\r\n\t\t\t\t\"y\": 0\r\n\t\t\t},\r\n\t\t\t\"size\": {\r\n\t\t\t\t\"width\": 150,\r\n\t\t\t\t\"height\": 75\r\n\t\t\t},\r\n\t\t\t\"angle\": 0,\r\n\t\t\t\"z\": 0,\r\n\t\t\t\"attrs\": {\r\n\t\t\t\t\"rect\": {\r\n\t\t\t\t\t\"fill\": \"white\",\r\n\t\t\t\t\t\"height\": 50,\r\n\t\t\t\t},\r\n\t\t\t\t\"text\": {\r\n\t\t\t\t\t\"text\": \"Rectangle\",\r\n\t\t\t\t\t\"fill\": \"black\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t},\r\n\t\t\"model\": {}\r\n\t}, {\r\n\t\t\"name\": \"Rounded Rectangle\",\r\n\t\t\"shape\": {\r\n\t\t\t\"type\": \"basic.Rect\",\r\n\t\t\t\"position\": {\r\n\t\t\t\t\"x\": 0,\r\n\t\t\t\t\"y\": 0\r\n\t\t\t},\r\n\t\t\t\"size\": {\r\n\t\t\t\t\"width\": 150,\r\n\t\t\t\t\"height\": 75\r\n\t\t\t},\r\n\t\t\t\"angle\": 0,\r\n\t\t\t\"z\": 0,\r\n\t\t\t\"attrs\": {\r\n\t\t\t\t\"rect\": {\r\n\t\t\t\t\t\"fill\": \"white\",\r\n\t\t\t\t\t\"height\": 50,\r\n\t\t\t\t\t\"rx\": 10,\r\n\t\t\t\t\t\"ry\": 10\r\n\t\t\t\t},\r\n\t\t\t\t\"text\": {\r\n\t\t\t\t\t\"text\": \"Rounded Rectangle\",\r\n\t\t\t\t\t\"fill\": \"black\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t},\r\n\t\t\"model\": {}\r\n\t}, {\r\n\t\t\"name\": \"Circle\",\r\n\t\t\"shape\": {\r\n\t\t\t\"type\": \"basic.Circle\",\r\n\t\t\t\"position\": {\r\n\t\t\t\t\"x\": 0,\r\n\t\t\t\t\"y\": 0\r\n\t\t\t},\r\n\t\t\t\"size\": {\r\n\t\t\t\t\"width\": 100,\r\n\t\t\t\t\"height\": 100\r\n\t\t\t},\r\n\t\t\t\"angle\": 0,\r\n\t\t\t\"z\": 0,\r\n\t\t\t\"attrs\": {\r\n\t\t\t\t\"circle\": {\r\n\t\t\t\t\t\"fill\": \"white\",\r\n\t\t\t\t},\r\n\t\t\t\t\"text\": {\r\n\t\t\t\t\t\"text\": \"Circle\",\r\n\t\t\t\t\t\"fill\": \"black\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}, {\r\n\t\t\"name\": \"Ellipse\",\r\n\t\t\"shape\": {\r\n\t\t\t\"type\": \"basic.Circle\",\r\n\t\t\t\"position\": {\r\n\t\t\t\t\"x\": 0,\r\n\t\t\t\t\"y\": 0\r\n\t\t\t},\r\n\t\t\t\"size\": {\r\n\t\t\t\t\"width\": 100,\r\n\t\t\t\t\"height\": 50\r\n\t\t\t},\r\n\t\t\t\"angle\": 0,\r\n\t\t\t\"z\": 0,\r\n\t\t\t\"attrs\": {\r\n\t\t\t\t\"circle\": {\r\n\t\t\t\t\t\"fill\": \"white\",\r\n\t\t\t\t},\r\n\t\t\t\t\"text\": {\r\n\t\t\t\t\t\"text\": \"Circle\",\r\n\t\t\t\t\t\"fill\": \"black\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}, {\r\n\t\t\"name\": \"Triangle\",\r\n\t\t\"shape\": {\r\n\t\t\t\"type\": \"basic.polygon\",\r\n\t\t\t\"position\": {\r\n\t\t\t\t\"x\": 0,\r\n\t\t\t\t\"y\": 0\r\n\t\t\t},\r\n\t\t\t\"size\": {\r\n\t\t\t\t\"width\": 100,\r\n\t\t\t\t\"height\": 80\r\n\t\t\t},\r\n\t\t\t\"angle\": 0,\r\n\t\t\t\"z\": 0,\r\n\t\t\t\"attrs\": {\r\n\t\t\t\t\"polygon\": {\r\n\t\t\t\t\tpoints: '0,100 50,0 100,100'\r\n\t\t\t\t},\r\n\t\t\t\t\"text\": {\r\n\t\t\t\t\t\"text\": \"Triangle\",\r\n\t\t\t\t\t\"fill\": \"black\",\r\n\t\t\t\t\t'ref-x': .5,\r\n\t\t\t\t\t'ref-y': .7,\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}]\r\n}","var modeller = angular.module(\"modeller\", []);\r\nmodeller.controller('ModellerCtrl', function($scope) {\r\n\tvar objects = {};\r\n\tvar linkObject = false;\r\n\t$scope.selectedObject = null;\r\n\t$scope.form = {};\r\n\t$scope.init = function() {\r\n\t\tvar graph = new joint.dia.Graph;\r\n\t\tvar paper = new joint.dia.Paper({\r\n\t\t\tel: $('#canvas'),\r\n\t\t\twidth: $(\"#canvas\").parent().width(),\r\n\t\t\theight: 600,\r\n\t\t\tmodel: graph,\r\n\t\t\tgridSize: 1\r\n\t\t});\r\n\t\t$scope.stencils = [basicShapesStencil];\r\n\t\t$scope.clearCanvas = function() {\r\n\t\t\tobjects = {};\r\n\t\t\t$scope.selectedObject = {};\r\n\t\t\t$scope.form = {};\r\n\t\t\tlinkObject = false;\r\n\t\t\tgraph.clear();\r\n\t\t}\r\n\t\t$scope.addTemplateToCanvas = function(template) {\r\n\t\t\ttemplate.shape.position = {\r\n\t\t\t\tx: 0,\r\n\t\t\t\ty: 0\r\n\t\t\t};\r\n\t\t\ttemplate.shape.attrs.text.text = template.name;\r\n\t\t\tvar shape = eval(\"new joint.shapes.\" + template.shape.type + \"(\" + JSON.stringify(template.shape) + \")\");\r\n\t\t\tvar object = {\r\n\t\t\t\tid: shape.id,\r\n\t\t\t\tname: template.name,\r\n\t\t\t\tshape: shape,\r\n\t\t\t\tmodel: template.model\r\n\t\t\t}\r\n\t\t\tobjects[shape.id] = object;\r\n\t\t\tgraph.addCells([shape]);\r\n\t\t\t$scope.selectedObject = object;\r\n\t\t}\r\n\t\t$scope.loadStencil = function() {\r\n\t\t\t$scope.stencils.push(JSON.parse($scope.form.stencil));\r\n\t\t}\r\n\t\t$scope.removeSelectedObject = function() {\r\n\t\t\tdelete objects[$scope.selectedObject.id];\r\n\t\t\t$scope.selectedObject.shape.remove();\r\n\t\t\t$scope.selectedObject = null;\r\n\t\t};\r\n\t\t$scope.linkSelectedObject = function() {\r\n\t\t\tif ($scope.selectedObject != null) {\r\n\t\t\t\tlinkObject = true;\r\n\t\t\t}\r\n\t\t};\r\n\t\t$scope.cloneSelectedObject = function() {\r\n\t\t\tvar results = $scope.selectedObject.shape.clone({\r\n\t\t\t\tdeep: true\r\n\t\t\t});\r\n\t\t\tfor (var i in results) {\r\n\t\t\t\tvar result = results[i];\r\n\t\t\t\tconsole.log(result);\r\n\t\t\t\tresult.attributes.position = {\r\n\t\t\t\t\tx: 0,\r\n\t\t\t\t\ty: 0\r\n\t\t\t\t};\r\n\t\t\t\tvar object = {\r\n\t\t\t\t\tid: result.attributes.id,\r\n\t\t\t\t\tname: $scope.selectedObject.name,\r\n\t\t\t\t\tshape: result,\r\n\t\t\t\t\tmodel: $scope.selectedObject.model\r\n\t\t\t\t}\r\n\t\t\t\tobjects[result.attributes.id] = object;\r\n\t\t\t\t$scope.selectedObject = object;\r\n\t\t\t}\r\n\t\t\tgraph.addCells(results);\r\n\t\t}\r\n\t\t$scope.updateModel = function() {\r\n\t\t\t$scope.selectedObject.model = JSON.parse($scope.form.model);\r\n\t\t}\r\n\t\t$scope.updateShape = function() {\r\n\t\t\t$scope.selectedObject.shape.attr(JSON.parse($scope.form.shape));\r\n\t\t}\r\n\t\t$scope.renameObject = function() {\r\n\t\t\t$scope.selectedObject.name = $scope.form.objectName;\r\n\t\t\t$scope.selectedObject.shape.attr({\r\n\t\t\t\t\"text\": {\r\n\t\t\t\t\t\"text\": $scope.form.objectName\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t\t$scope.setFormJSON = function(param, json) {\r\n\t\t\t$scope.form[param] = JSON.stringify(json, null, '\\t');\r\n\t\t}\r\n\t\t$scope.export = function() {\r\n\t\t\tvar json = graph.toJSON();\r\n\t\t\tjson.models = [];\r\n\t\t\tfor (id in objects) {\r\n\t\t\t\tvar object = objects[id];\r\n\t\t\t\tjson.models.push({\r\n\t\t\t\t\tid: id,\r\n\t\t\t\t\tname: object.name,\r\n\t\t\t\t\tmodel: object.model\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn JSON.stringify(json, null, '\\t');\r\n\t\t}\r\n\t\t$scope.exportSelectedObject = function() {\r\n\t\t\tvar object = $scope.exportObject($scope.selectedObject);\r\n\t\t\treturn JSON.stringify(object, null, '\\t');\r\n\t\t};\r\n\t\t$scope.exportObject = function(object) {\r\n\t\t\tvar result = {\r\n\t\t\t\tname: object.name,\r\n\t\t\t\tproperties: object.model,\r\n\t\t\t\tlinks: [],\r\n\t\t\t\tparts: []\r\n\t\t\t};\r\n\t\t\tvar links = graph.getConnectedLinks(object.shape, {\r\n\t\t\t\tinbound: true\r\n\t\t\t});\r\n\t\t\tfor (var i in links) {\r\n\t\t\t\tvar link = links[i];\r\n\t\t\t\tvar linkResult = $scope.exportObject(objects[link.attributes.source.id]);\r\n\t\t\t\tresult.links.push(linkResult);\r\n\t\t\t}\r\n\t\t\tvar embeds = object.shape.attributes.embeds;\r\n\t\t\tif (embeds) {\r\n\t\t\t\tfor (var i in embeds) {\r\n\t\t\t\t\tvar embedId = embeds[i];\r\n\t\t\t\t\tvar embedResult = $scope.exportObject(objects[embedId]);\r\n\t\t\t\t\tresult.parts.push(embedResult);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t$scope.exportAsStencil = function() {\r\n\t\t\tvar stencilName = prompt(\"Stencil Name\");\r\n\t\t\tvar stencil = {\r\n\t\t\t\tname: stencilName,\r\n\t\t\t\ttemplates: []\r\n\t\t\t}\r\n\t\t\tfor (var id in objects) {\r\n\t\t\t\tvar object = objects[id];\r\n\t\t\t\tconsole.log(object.shape);\r\n\t\t\t\tvar shape = object.shape.toJSON();\r\n\t\t\t\tdelete shape.id;\r\n\t\t\t\tvar template = {\r\n\t\t\t\t\tname: object.name,\r\n\t\t\t\t\tmodel: object.model,\r\n\t\t\t\t\tshape: shape\r\n\t\t\t\t}\r\n\t\t\t\tstencil.templates.push(template);\r\n\t\t\t}\r\n\t\t\treturn JSON.stringify(stencil, null, '\\t');\r\n\t\t}\r\n\t\t$scope.import = function() {\r\n\t\t\tvar json = JSON.parse($scope.form.import);\r\n\t\t\tgraph.fromJSON(json);\r\n\t\t\tfor (i in json.models) {\r\n\t\t\t\tvar model = json.models[i];\r\n\t\t\t\tvar id = model.id;\r\n\t\t\t\tvar shape = graph.getCell(id);\r\n\t\t\t\tvar object = {\r\n\t\t\t\t\tid: id,\r\n\t\t\t\t\tname: model.name,\r\n\t\t\t\t\tshape: shape,\r\n\t\t\t\t\tmodel: model.model\r\n\t\t\t\t};\r\n\t\t\t\tobjects[id] = object;\r\n\t\t\t}\r\n\t\t};\r\n\t\tpaper.on(\"cell:pointerdown\", function(cellView, evt, x, y) {\r\n\t\t\tif (cellView.model.attributes.parent) {\r\n\t\t\t\tgraph.getCell(cellView.model.attributes.parent).unembed(cellView.model);\r\n\t\t\t}\r\n\t\t\tvar objectId = cellView.model.id;\r\n\t\t\tif (linkObject) {\r\n\t\t\t\tif ($scope.selectedObject.id != objectId) {\r\n\t\t\t\t\tvar link = new joint.dia.Link({\r\n\t\t\t\t\t\tsource: {\r\n\t\t\t\t\t\t\tid: $scope.selectedObject.id\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\ttarget: {\r\n\t\t\t\t\t\t\tid: objectId\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tattrs: {\r\n\t\t\t\t\t\t\t'.marker-source': {\r\n\t\t\t\t\t\t\t\tfill: 'red',\r\n\t\t\t\t\t\t\t\td: 'M 10 0 L 0 5 L 10 10 z'\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t'.marker-target': {\r\n\t\t\t\t\t\t\t\tfill: 'yellow',\r\n\t\t\t\t\t\t\t\td: 'M 10 0 L 0 5 L 10 10 z'\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tgraph.addCells([link]);\r\n\t\t\t\t\tlinkObject = false;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tif ($scope.selectedObject == null || $scope.selectedObject.id != objectId) {\r\n\t\t\t\t\t$scope.$apply(function() {\r\n\t\t\t\t\t\t$scope.selectedObject = objects[objectId];\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t\tpaper.on('cell:pointerup', function(cellView, evt, x, y) {\r\n\t\t\t// Find the first element below that is not a link nor the dragged element itself.\r\n\t\t\tvar elementBelow = graph.get('cells').find(function(cell) {\r\n\t\t\t\tif (cell instanceof joint.dia.Link) return false; // Not interested in links.\r\n\t\t\t\tif (cell.id === cellView.model.id) return false; // The same element as the dropped one.\r\n\t\t\t\tvar bbox = paper.findViewByModel(cell).getBBox();\r\n\t\t\t\treturn new window.g.rect(bbox.x, bbox.y, bbox.width, bbox.height).containsPoint(g.point(x, y));\r\n\t\t\t});\r\n\t\t\tif (elementBelow && elementBelow.attributes.parent != cellView.model.id) {\r\n\t\t\t\telementBelow.embed(cellView.model);\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n});","joint.shapes.basic.polygon = joint.dia.Element.extend({\r\n\r\n\tmarkup: '<g class=\"rotatable\"><g class=\"scalable\"><polygon/></g><text/></g>',\r\n\r\n\tdefaults: joint.util.deepSupplement({\r\n\r\n\t\ttype: 'basic.polygon',\r\n\t\tattrs: {\r\n\t\t\tpolygon: {\r\n\t\t\t\tfill: 'white',\r\n\t\t\t\tstroke: 'black'\r\n\t\t\t},\r\n\t\t\ttext: {\r\n\t\t\t\t'font-size': 14,\r\n\t\t\t\tref: '.',\r\n\t\t\t\t'ref-x': .5,\r\n\t\t\t\t'ref-y': .5,\r\n\t\t\t\t'x-alignment': 'middle',\r\n\t\t\t\t'y-alignment': 'middle'\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}, joint.dia.Element.prototype.defaults)\r\n\r\n});"]}